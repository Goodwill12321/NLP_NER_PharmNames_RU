import re
import json
from tqdm import tqdm
from openpyxl import load_workbook


def extract_heuristics(text):
    """–†–∞–∑–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–æ–∫—É '–¢–æ–≤–∞—Ä–ü–æ—Å—Ç–∞–≤–∫–∏' –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å—É—â–Ω–æ—Å—Ç–∏."""
    result = {}

    # –¢–æ—Ä–≥–æ–≤–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ (–≤—Å—ë –¥–æ –ø–µ—Ä–≤–æ–π –¥–æ–∑–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ —Ñ–æ—Ä–º—ã)
    name_match = re.match(r"(.+?)\s+(—Ç–∞–±–ª|–∫–∞–ø—Å|—Ä-—Ä|—Å—É—Å–ø|–º–∞–∑—å|–∫—Ä–µ–º|—Å—É–ø–ø|–≥–µ–ª—å|–∞—ç—Ä–æ–∑|—Å–ø—Ä–µ–π|–ø–∞—Å—Ç|–ª–∏–æ—Ñ|–ø–æ—Ä–æ—à|—Ä–µ–∫—Ç|–¥—Ä–∞–∂–µ|–∏–Ω—Ñ—É–∑|–¥/–∏–Ω|–¥/—Ä–∞—Å—Å–∞—Å—ã–≤–∞–Ω–∏—è|–≥—Ä–∞–Ω—É–ª|–∞–º–ø|—Ñ–ª|—Ç—é–±|—Å–∞—à–µ|—à–ø—Ä|–º–∏–∫—Ä–æ–≥—Ä–∞–Ω—É–ª)", text, re.IGNORECASE)
    if name_match:
        result["–¢–æ—Ä–≥–æ–≤–æ–µ–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"] = name_match.group(1).strip()

    # –î–æ–∑–∏—Ä–æ–≤–∫–∞
    dose_match = re.search(r'(\d+[.,]?\d*)\s?(–º–≥|–º–∫–≥|–≥|–º–ª|%)\b', text, re.IGNORECASE)
    if dose_match:
        result["–î–æ–∑–∏—Ä–æ–≤–∫–∞"] = f"{dose_match.group(1)} {dose_match.group(2)}".replace(',', '.').strip()
        result["–î–æ–∑–∏—Ä–æ–≤–∫–∞–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"] = dose_match.group(1).replace(',', '.')
        result["–î–æ–∑–∏—Ä–æ–≤–∫–∞_–ï–ò_–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∞—è"] = dose_match.group(2)

    # –õ–µ–∫–§–æ—Ä–º–∞
    form_match = re.search(r'(—Ç–∞–±–ª|–∫–∞–ø—Å|—Ä-—Ä|—Å—É—Å–ø|–º–∞–∑—å|–∫—Ä–µ–º|—Å—É–ø–ø|–≥–µ–ª—å|–∞—ç—Ä–æ–∑|—Å–ø—Ä–µ–π|–ø–∞—Å—Ç|–ª–∏–æ—Ñ|–ø–æ—Ä–æ—à|—Ä–µ–∫—Ç|–¥—Ä–∞–∂–µ|–∏–Ω—Ñ—É–∑|–¥/–∏–Ω|–¥/—Ä–∞—Å—Å–∞—Å—ã–≤–∞–Ω–∏—è|–≥—Ä–∞–Ω—É–ª|—à–ø—Ä|—Å–∞—à–µ|–º–∏–∫—Ä–æ–≥—Ä–∞–Ω—É–ª)', text, re.IGNORECASE)
    if form_match:
        result["–õ–µ–∫–§–æ—Ä–º–∞"] = form_match.group(0)

    # –ü–µ—Ä–≤–∏—á–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞
    prim_match = re.search(r'(\d+)\s*(–º–ª|–º–≥|–∞–º–ø|—Ñ–ª|—Ç–∞–±|–∫–∞–ø—Å|—à—Ç|—Ç—é–±)', text, re.IGNORECASE)
    if prim_match:
        result["–ü–µ—Ä–≤–∏—á–Ω–∞—è–£–ø–∞–∫–æ–≤–∫–∞–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"] = prim_match.group(1)
        result["–ü–µ—Ä–≤–∏—á–Ω–∞—è–£–ø–∞–∫–æ–≤–∫–∞–ù–∞–∑–≤–∞–Ω–∏–µ"] = prim_match.group(2)

    # –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∞—è —É–ø–∞–∫–æ–≤–∫–∞
    pot_match = re.search(r'‚Ññ?\s*(\d+)', text)
    if pot_match:
        result["–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∞—è–£–ø–∞–∫–æ–≤–∫–∞–ö–æ–ª–≤–æ"] = pot_match.group(1)

    return result


def parse_excel_with_heuristics(input_file, output_file, max_records=None):
    print("üîç –ß—Ç–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞...")
    wb = load_workbook(filename=input_file, read_only=True)
    ws = wb.active

    headers = [str(cell.value).strip() for cell in next(ws.iter_rows(min_row=1, max_row=1))]

    total_rows = ws.max_row - 1
    if max_records:
        total_rows = min(total_rows, max_records)

    results = []

    for i, row in enumerate(tqdm(ws.iter_rows(min_row=2), total=total_rows, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞")):
        if max_records and i >= max_records:
            break

        row_data = {header: str(cell.value).strip() if cell.value is not None else "" for header, cell in zip(headers, row)}
        source_text = row_data.get("–¢–æ–≤–∞—Ä–ü–æ—Å—Ç–∞–≤–∫–∏", "")
        if not source_text:
            continue

        annotations = extract_heuristics(source_text)
        results.append({
            "text": source_text,
            "entities": annotations
        })

    with open(output_file, "w", encoding="utf-8") as f:
        json.dump(results, f, ensure_ascii=False, indent=2)

    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(results)} –∑–∞–ø–∏—Å–µ–π –≤ {output_file}")
    wb.close()


# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    parse_excel_with_heuristics(
        input_file="nlp_dataset.xlsx",
        output_file="parsed_heuristic_output.json",
        max_records=100  # –ü–æ–º–µ–Ω—è–π –Ω–∞ None, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
    )
